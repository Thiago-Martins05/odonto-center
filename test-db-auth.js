const bcrypt = require("bcryptjs");
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function testDbAuth() {
  try {
    console.log("üîê Testando autentica√ß√£o com banco de dados...");

    const email = "admin@odontocenter.com";
    const password = "admin123";

    // Buscar usu√°rio no banco
    const user = await prisma.user.findUnique({
      where: { email: email },
    });

    if (!user) {
      console.log("‚ùå Usu√°rio n√£o encontrado no banco de dados");
      return;
    }

    console.log("‚úÖ Usu√°rio encontrado:");
    console.log(`   Email: ${user.email}`);
    console.log(`   Nome: ${user.name}`);
    console.log(`   Role: ${user.role}`);
    console.log(`   Ativo: ${user.active}`);

    // Verificar senha
    const isPasswordValid = await bcrypt.compare(password, user.password);
    console.log(`üîë Senha v√°lida: ${isPasswordValid}`);

    if (isPasswordValid) {
      console.log("üéâ Autentica√ß√£o bem-sucedida!");
      console.log("   Dados que seriam retornados:");
      console.log(`     ID: ${user.id}`);
      console.log(`     Email: ${user.email}`);
      console.log(`     Nome: ${user.name}`);
      console.log(`     Role: ${user.role}`);
    } else {
      console.log("‚ùå Senha inv√°lida");
      console.log(`   Senha fornecida: ${password}`);
      console.log(`   Hash armazenado: ${user.password.substring(0, 20)}...`);
    }
  } catch (error) {
    console.error("‚ùå Erro ao testar autentica√ß√£o:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testDbAuth();
